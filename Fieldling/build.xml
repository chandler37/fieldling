<?xml version="1.0" encoding="iso-8859-1"?>

<!-- 
@author Michel Jacobson (jacobson@idf.ext.jussieu.fr) and Edward Garrett (eg3p@virginia.edu)

This buildfile needs the following jar files:
for mediaplayer:
	extensions/jmf.jar
	extensions/java40.jar
	extensions/QTJava.zip
for QuillDriver:
	extensions/xalan.jar
	extensions/xercesImpl.jar
	extensions/xml-apis.jar
	extensions/jdom.jar
	extensions/jaxen-full.jar
	extensions/jaxen-jdom.jar
	extensions/saxpath.jar
for Tibetan-only QuillDriver
	extensions/Jskad.jar
-->

<project name="fieldlingtools" default="compile" basedir=".">

	<description>
This project includes assorted tools for field linguistics.
Currently, the main sub-projects are:

1) Media Player: a framework for synchronizing media files 
with linguistic (and other) annotations, using Java Media 
Framework and Quicktime for Java.

2) QuillDriver: a tool for linking XML-based annotations 
to media files. QuillDriver has a multilingual version and 
a version optimized for use with Tibetan script.
	</description>

	<property name="ext"            value="extensions"/>
	<property name="doc"            value="documentation"/>
	<property name="data.dir"	value="data"/>
	<property name="jvm" 		value="java"/>
	<property name="build.dir"      value="build"/>
	<property name="raw.source"	value="src"/>
	<property name="tweaked.source" value="${build.dir}/src"/>	
	<property name="tibetan.source"	value="${tweaked.source}/tibetan"/>
	<property name="unicode.source"	value="${tweaked.source}/unicode"/>
	<property name="build.classes"	value="${build.dir}/classes"/>
	<property name="unicode.classes"  value="${build.classes}/unicode"/>
	<property name="tibetan.classes"  value="${build.classes}/tibetan"/>
	<property name="build.dist"     value="${build.dir}/dist"/>
	<property name="build.dist.jws"	value="${build.dist}/jws"/>
	<property name="build.dist.jws.lib" value="${build.dist.jws}/lib"/>
	<property name="build.dist.zip"	value="${build.dist}/zip"/>
	<property name="build.dist.zip.tozip" value="${build.dist.zip}/QuillDriver"/>
	<property name="build.dist.zip.tozip.lib" value="${build.dist.zip.tozip}/lib"/>
	<property name="build.doc"      value="${build.dir}/doc"/>
	<property name="build.eg"       value="${build.doc}/eg"/>
	<property name="distrib.source"	value="distribSrc"/>
	<property name="jnlp.codebase"	value="http://mayor.lib.virginia.edu/~eg3p/QuillDriver/"/>
	<property name="ftp.server"	value="mayor.lib.virginia.edu"/>
	<property name="ftp.dir"	value="Sites/QuillDriver"/>
	<property name="ftp.id"	value="eg3p"/>
	<property name="ftp.password"	value="''"/>
	<property name="archive.location" value="http://mayor.lib.virginia.edu/~eg3p/QuillDriver"/>
	<property name="mail.from"	value="eg3p@virginia.edu"/>
	<property name="mail.host"	value="e.mail.virginia.edu"/>
	<property name="mail.to"	value="eg3p@virginia.edu,cewalker@midway.uchicago.edu,dfg9w@virginia.edu,rogerand@humnet.ucla.edu,fmg3u@virginia.edu"/>
	<property name="update.message"	value=""/>
	
	<path id="my.classpath">
		<fileset id="extensions" dir="${ext}">
			<include name="*.jar"/>
			<include name="*.zip"/>
		</fileset>
	</path>

<!--
	<path id="my.classpath">
		<pathelement location="${ext}/xml-apis.jar"/>
		<pathelement location="${ext}/xercesImpl.jar"/>
		<pathelement location="${ext}/xalan.jar"/>
		<pathelement location="${ext}/jdom.jar"/>
		<pathelement location="${ext}/jaxen-full.jar"/>
		<pathelement location="${ext}/jaxen-jdom.jar"/>
		<pathelement location="${ext}/saxpath.jar"/>
		<pathelement location="${ext}/Jskad.jar"/>
		<pathelement location="${ext}/QTJava.zip"/>
		<pathelement location="${ext}/java40.jar"/>
		<pathelement location="${ext}/jmf.jar"/>
	</path>
-->

	<!-- Create the build directory structure used by compile -->
	<target name="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${tweaked.source}"/>
		<mkdir dir="${tibetan.source}"/>
		<mkdir dir="${unicode.source}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${unicode.classes}"/>
		<mkdir dir="${tibetan.classes}"/>
		<mkdir dir="${build.dist}"/>
		<mkdir dir="${build.dist.jws}"/>
		<mkdir dir="${build.dist.jws.lib}"/>
		<mkdir dir="${build.dist.zip}"/>
		<mkdir dir="${build.dist.zip.tozip}"/>
		<mkdir dir="${build.dist.zip.tozip.lib}"/>
		<mkdir dir="${build.doc}"/>
		<mkdir dir="${build.eg}"/>
		<tstamp>
			<format property="qd.date" pattern="yy.MM.dd-h.mma"/>
		</tstamp>
	</target>

	<target name="clean" description="removes all generated files">
		<delete dir="${build.dir}"/>
	</target>
	
	<target name="mp-compile" depends="init" description="compile mediaplayer source">
		<javac srcdir="${raw.source}" destdir="${unicode.classes}" includes="fieldling/mediaplayer/**">
			<classpath refid="my.classpath"/>
		</javac>
		<copy todir="${tibetan.classes}">
			<fileset dir="${unicode.classes}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
		
	<target name="mp-jar" depends="mp-compile" description="generates mediaplayer.jar in build/dist">
		<jar jarfile="${build.dist}/mediaplayer.jar" basedir="${unicode.classes}" />		
	</target>

	<target name="mp-eg" depends="mp-jar" description="compile, build jars, create an example">
		<delete dir="${build.eg}"/>
		<copy todir="${build.eg}">
			<fileset dir="${doc}/eg">
				<include name="*.*"/>
			</fileset>
		</copy>
		<property location="${build.eg}/BAC.mp3" name="mediafile"/>
		<style out="${build.eg}/testJMF.htm" in="${build.eg}/BAC.xml" style="${build.eg}/playerManager.xsl">
			<param name="player" expression="jmf"/>
			<param name="mediafile" expression="file://${mediafile}"/>
		</style>
		<style out="${build.eg}/testQT4J.htm" in="${build.eg}/BAC.xml" style="${build.eg}/playerManager.xsl">
			<param name="player" expression="qt4j"/>
			<param name="mediafile" expression="file://${mediafile}"/>
		</style>
	</target>

	<target name="create-unicode-source" if="unicode.source.isUptodate">
		<copy todir="${unicode.source}" overwrite="true">
			<fileset dir="${raw.source}" includes="**/*"/>
			<filterset>
				<filter token="TIBETAN" value="//TIBETAN-SPECIFIC "/>
				<filter token="UNICODE" value=""/>
			</filterset>
		</copy>	
	</target>
	
	<target name="create-tibetan-source" if="tibetan.source.isUptodate">
		<copy todir="${tibetan.source}" overwrite="true">
			<fileset dir="${raw.source}" includes="**/*"/>
			<filterset>
				<filter token="TIBETAN" value=""/>
				<filter token="UNICODE" value="//NON-TIBETAN "/>
			</filterset>
		</copy>
	</target>
	
	<target name="qd-compile" depends="init,mp-compile" description="compile qd source">
		<!-- Instructions for Unicode version of QD -->
		
		<!-- check to see if Unicode source is uptodate; if not, create it -->
		<!-- <uptodate property="unicode.source.isUptodate">
			<srcfiles dir="${raw.source}" includes="**/*.java"/>
			<mapper type="glob" from="*" to="${unicode.source}/*"/>
		</uptodate> 
		<antcall target="create-unicode-source"/> -->

		<!-- create Unicode source if it's not already up to date -->
		<copy todir="${unicode.source}" overwrite="false">
			<fileset dir="${raw.source}" includes="**/*"/>
			<filterset>
				<filter token="TIBETAN" value="//TIBETAN-SPECIFIC "/>
				<filter token="UNICODE" value=""/>
			</filterset>
		</copy>
		
		
		<!-- compile unicode source -->
		<javac srcdir="${unicode.source}" destdir="${unicode.classes}" includes="fieldling/quilldriver/**">
			<classpath refid="my.classpath"/>
		</javac>
		
		<!-- copy associated unicode resources -->
		<copy todir="${unicode.classes}">
			<fileset dir="${raw.source}">
				<include name="MessageBundle*"/>
			</fileset>
			<fileset dir="${data.dir}/quilldriver">
				<include name="*.xsl"/>
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="${unicode.classes}/fieldling/quilldriver">
			<fileset dir="${data.dir}/quilldriver">
				<include name="*.gif"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<!-- Instructions for Tibetan version of QD -->
		
		<!-- create Tibetan source if it's not already up to date -->
		<copy todir="${tibetan.source}" overwrite="false">
			<fileset dir="${raw.source}" includes="**/*"/>
			<filterset>
				<filter token="TIBETAN" value=""/>
				<filter token="UNICODE" value="//NON-TIBETAN "/>
			</filterset>
		</copy>
		
		<!-- compile Tibetan source -->
		<javac srcdir="${tibetan.source}" destdir="${tibetan.classes}" includes="fieldling/quilldriver/**">
			<classpath refid="my.classpath"/>
		</javac>
		
		<!-- copy associated Tibetan resources -->
		<copy todir="${tibetan.classes}">
			<fileset dir="${raw.source}">
				<include name="MessageBundle*"/>
			</fileset>
			<fileset dir="${data.dir}/quilldriver">
				<include name="*.xsl"/>
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="${tibetan.classes}/fieldling/quilldriver">
			<fileset dir="${data.dir}/quilldriver">
				<include name="*.gif"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>		
	</target>

	<!-- I HAVE NOT INCLUDED AN EXPLICIT MANIFEST BECAUSE IF YOU USE ANT TO RUN
		A JAR FILE (AT LEAST ON MAC OS X), THEN IT FAILS TO LOAD THE EXTENSIONS,
		EVEN IF THEY ARE SPECIFIED IN THE CLASSPATH. IN ANY CASE THE MANIFEST 
		IS NOT REQUIRED SINCE OUR DEPLOYMENT METHODS FOR QD (MAC APP; JWS) DO 
		NOT REQUIRE A DOUBLE-CLICKABLE JAR. -->
		
	<target name="qd-jar" depends="qd-compile" description="generate quilldriver.jar">
		<!-- Unicode version -->
		<jar jarfile="${build.dist}/quilldriver.jar" basedir="${unicode.classes}" />
		
		<!-- Tibetan version -->
		<jar jarfile="${build.dist}/quilldriver-TIB.jar" basedir="${tibetan.classes}" />
	</target>

	<target name="qd-jws" depends="qd-jar" description="generate qd's Java Web Start distro">
		<!-- Copy QD jars -->
		<copy file="${build.dist}/quilldriver.jar" tofile="${build.dist.jws}/quilldriver.jar"/>
		<copy file="${build.dist}/quilldriver-TIB.jar" tofile="${build.dist.jws}/quilldriver-TIB.jar"/>
		
		<!-- Step 1: Copy the libraries -->
		<copy todir="${build.dist.jws.lib}">
			<fileset dir="${ext}">
				<!-- We don't need to copy these files because they should always be
				in the System's classpath if installed correctly. -->
				<exclude name="QTJava.zip"/>
				<exclude name="jmf.jar"/>
				<exclude name="java40.jar"/>
			</fileset>
		</copy>
		
		<antcall target="qd-unicode-jnlp">
			<param name="jnlp.file" value="QuillDriver.jnlp"/>
			<param name="jar.file" value="quilldriver.jar"/>
		</antcall>
		<antcall target="qd-tibetan-jnlp">
			<param name="jnlp.file" value="QuillDriver-TIB.jnlp"/>
			<param name="jar.file" value="quilldriver-TIB.jar"/>
		</antcall>		
		
		<!-- Step 3: Sign the jars -->
		<signjar alias="testsigner" keystore="${data.dir}/keystore" storepass="testpassword">
			<fileset dir="${build.dist.jws}">
				<include name="**/*.jar"/>
			</fileset>
		</signjar>
		
		<!-- Make additional dated Jar and Jnlp descriptor for Tibetan only version -->
		<copy file="${build.dist.jws}/quilldriver-TIB.jar" tofile="${build.dist.jws}/quilldriver-TIB-${qd.date}.jar"/>
		<antcall target="qd-tibetan-jnlp">
			<param name="jnlp.file" value="QD-TIB-${qd.date}.jnlp"/>
			<param name="jar.file" value="quilldriver-TIB-${qd.date}.jar"/>
		</antcall>
	</target>

	<target name="qd-unicode-jnlp">
		<!-- Step 2: Create the jnlp file -->
		<!-- Write the head of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="false">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<jnlp spec="1.0+"]]></echo>
		<!-- Write the middle of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="true">
		<![CDATA[      codebase="]]>${jnlp.codebase}<![CDATA["]]></echo>
		<!-- Write the tail of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="true">
<![CDATA[      href="]]>${jnlp.file}<![CDATA[">
<information>
  <title>QuillDriver</title>
  <vendor>THDL</vendor>
  <homepage href="http://iris.lib.virginia.edu/tibet/tools/quilldriver" />
  <description>
QuillDriver is a fully customizable tool for transcribing and annotating 
digital video files. Annotation files can be any well-formed XML, 
and supported media players include Java Media Framework (JMF) 
and Quicktime for Java.
  </description>
  <offline-allowed/>
</information>
<security>
  <all-permissions/>
</security>
<resources os="Windows" arch="x86">
  <j2se version="1.4+"/>
  <jar href="]]>${jar.file}<![CDATA["/>
  <jar href="lib/xml-apis.jar"/>
  <jar href="lib/xercesImpl.jar"/>
  <jar href="lib/xalan.jar"/>
  <jar href="lib/jdom.jar"/>
  <jar href="lib/jaxen-full.jar"/>
  <jar href="lib/jaxen-jdom.jar"/>
  <jar href="lib/saxpath.jar"/> 
</resources>
<resources os="Mac OS X" arch="ppc">
  <j2se version="1.3.1"/>
  <jar href="]]>${jar.file}<![CDATA["/>
  <jar href="lib/xml-apis.jar"/>
  <jar href="lib/xercesImpl.jar"/>
  <jar href="lib/xalan.jar"/>
  <jar href="lib/jdom.jar"/>
  <jar href="lib/jaxen-full.jar"/>
  <jar href="lib/jaxen-jdom.jar"/>
  <jar href="lib/saxpath.jar"/>
</resources>
<application-desc main-class="fieldling.quilldriver.QDShell"/>
</jnlp>]]>
		</echo>
	</target>
	
	<target name="qd-tibetan-jnlp">
		<!-- Step 2: Create the jnlp file -->
		<!-- Write the head of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="false">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<jnlp spec="1.0+"]]></echo>
		<!-- Write the middle of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="true">
		<![CDATA[      codebase="]]>${jnlp.codebase}<![CDATA["]]></echo>
		<!-- Write the tail of the .jnlp file: -->
		<echo file="${build.dist.jws}/${jnlp.file}" append="true">
<![CDATA[      href="]]>${jnlp.file}<![CDATA[">
<information>
  <title>QuillDriver-TIBETAN</title>
  <vendor>THDL</vendor>
  <homepage href="http://iris.lib.virginia.edu/tibet/tools/quilldriver" />
  <description>
QuillDriver is a tool for transcribing and annotating digital video files.
Annotation files can be any well-formed XML, and supported media players include
Java Media Framework (JMF) and Quicktime for Java. QuillDriver-TIBETAN has been
optimized for use with Tibetan script.
  </description>
  <offline-allowed/>
</information>
<security>
  <all-permissions/>
</security>
<resources os="Windows" arch="x86">
  <j2se version="1.4+"/>
  <jar href="]]>${jar.file}<![CDATA["/>
  <jar href="lib/Jskad.jar"/>
  <jar href="lib/xml-apis.jar"/>
  <jar href="lib/xercesImpl.jar"/>
  <jar href="lib/xalan.jar"/>
  <jar href="lib/jdom.jar"/>
  <jar href="lib/jaxen-full.jar"/>
  <jar href="lib/jaxen-jdom.jar"/>
  <jar href="lib/saxpath.jar"/> 
</resources>
<resources os="Mac OS X" arch="ppc">
  <j2se version="1.3.1"/>
  <jar href="]]>${jar.file}<![CDATA["/>
  <jar href="lib/Jskad.jar"/>
  <jar href="lib/xml-apis.jar"/>
  <jar href="lib/xercesImpl.jar"/>
  <jar href="lib/xalan.jar"/>
  <jar href="lib/jdom.jar"/>
  <jar href="lib/jaxen-full.jar"/>
  <jar href="lib/jaxen-jdom.jar"/>
  <jar href="lib/saxpath.jar"/>
</resources>
<application-desc main-class="fieldling.quilldriver.QDShell"/>
</jnlp>]]>
		</echo>
	</target>

	<target name="qd-zip" depends="qd-jar" description="create qd zip files for Tibetan">
		<copy todir="${build.dist.zip.tozip.lib}">
			<fileset dir="${ext}">
				<!-- We don't need to copy these files because they should always be
				in the System's classpath if installed correctly. -->
				<exclude name="QTJava.zip"/>
				<exclude name="jmf.jar"/>
				<exclude name="java40.jar"/>
			</fileset>
		</copy>
		<copy file="${build.dist}/quilldriver-TIB.jar" tofile="${build.dist.zip.tozip.lib}/quilldriver-TIB-${qd.date}.jar"/>
		<echo file="${build.dist.zip.tozip}/QD-TIB-${qd.date}.bat" append="false"><![CDATA[javaw -cp lib/xercesImpl.jar;lib/xml-apis.jar;lib/xalan.jar;lib/jdom.jar;lib/saxpath.jar;lib/jaxen-full.jar;lib/jaxen-jdom.jar;lib/Jskad.jar;lib/quilldriver-TIB-]]>${qd.date}.jar fieldling.quilldriver.QDShell</echo>
		<zip destfile="${build.dist}/QuillDriver-TIB.zip">
			<fileset dir="${build.dist.zip}">
				<include name="QuillDriver/**/*"/>
			</fileset>
		</zip>
		<zip destfile="${build.dist}/QD-TIB-Update-${qd.date}.zip">
			<fileset dir="${build.dist.zip.tozip}">
				<include name="QD-TIB-${qd.date}.bat"/>
				<include name="lib/quilldriver-TIB-${qd.date}.jar"/>
			</fileset>
		</zip>
	</target>

	<target name="qd-update-archive" description="update server's archives.xml file">
		<get src="${archive.location}/archive.xml" dest="${build.dist}/old-archive.xml"/>
		<xslt in="${build.dist}/old-archive.xml" out="${build.dist}/archive.xml" style="${data.dir}/quilldriver/add-archive.xsl">
			<param name="date" expression="${qd.date}"/>
			<param name="jnlp" expression="http://mayor.lib.virginia.edu/~eg3p/QuillDriver/QD-TIB-${qd.date}.jnlp"/>
			<param name="zip" expression="http://mayor.lib.virginia.edu/~eg3p/QuillDriver/QD-TIB-Update-${qd.date}.zip"/>
			<param name="note" expression="${update.message}"/>
		</xslt>
	</target>
		
	<target name="qd-ftp-zip" depends="qd-zip" description="ftp qd zip files to server">
		<ftp server="${ftp.server}" remotedir="${ftp.dir}" 
			userid="${ftp.id}" password="${ftp.password}" 
			binary="yes" depends="true" verbose="true">
				<fileset dir="${build.dist}">
					<include name="*.zip"/>
				</fileset>
		</ftp>
	</target>
	
	<target name="qd-ftp-jws-libs" depends="qd-ftp-jws-nolibs" description="ftp qd and libraries to server">
		<ftp server="${ftp.server}" remotedir="${ftp.dir}" 
			userid="${ftp.id}" password="${ftp.password}" 
			binary="yes" depends="true" verbose="true">
				<fileset dir="${build.dist.jws.lib}">
					<include name="**/*"/>
				</fileset>
		</ftp>
	</target>

	<target name="qd-ftp-jws-update" depends="qd-jws" description="ftp new qd to server">
		<ftp server="${ftp.server}" remotedir="${ftp.dir}" 
			userid="${ftp.id}" password="${ftp.password}" 
			binary="yes" depends="true" verbose="true">
				<fileset dir="${build.dist.jws}">
					<include name="quilldriver.jar"/>
					<include name="quilldriver-TIB-${qd.date}.jar"/>
					<include name="QD-TIB-${qd.date}.jnlp"/>
				</fileset>
		</ftp>
	</target>
	
	<target name="qd-ftp-jws-nolibs" depends="qd-jws" description="ftp new qd to server">
		<ftp server="${ftp.server}" remotedir="${ftp.dir}" 
			userid="${ftp.id}" password="${ftp.password}" 
			binary="yes" depends="true" verbose="true">
				<fileset dir="${build.dist.jws}">
					<include name="QuillDriver.jnlp"/>
					<include name="quilldriver.jar"/>
					<include name="QuillDriver-TIB.jnlp"/>
					<include name="quilldriver-TIB.jar"/>
				</fileset>
		</ftp>
	</target>
	
	<target name="qd-ftp-update" depends="qd-ftp-zip,qd-ftp-jws-nolibs,qd-ftp-jws-update,qd-update-archive" description="ftp all new version info to website">
		<ftp server="${ftp.server}" remotedir="${ftp.dir}" 
			userid="${ftp.id}" password="${ftp.password}" 
			binary="no" depends="true" verbose="true">
				<fileset dir="${build.dist}">
					<include name="archive.xml"/>
				</fileset>
		</ftp>
		<antcall target="qd-email-notify"/>
	</target>

	<target name="qd-email-notify" description="send email alerting users to update">
		<mail from="${mail.from}" tolist="${mail.to}" mailhost="${mail.host}" subject="Check the QuillDriver Archive for a new version">
			<message>${update.message}</message>
		</mail>
	</target>
	
	<!-- SOMEHOW USING <java jar="quilldriver.jar" etc.> DOES NOT WORK PROPERLY:
		IF YOU DO THIS THEN THE EXTENSIONS ARE NOT FOUND (AT LEAST ON MAC OS X. 
		SO INSTEAD I RUN THE CLASS AND PUT THE JAR AT THE HEAD OF THE CLASSPATH. -->

	<target name="qd-run-unicode" depends="qd-compile" description="runs multilingual version of QuillDriver">
		<java classname="fieldling.quilldriver.QDShell" jvm="${jvm}" fork="yes">
			<classpath>
				<pathelement location="${unicode.classes}"/>
				<!-- <pathelement location="${build.dist}/quilldriver.jar"/> -->
				<path refid="my.classpath"/>
			</classpath>
		</java>
	</target>

	<target name="qd-run-tibetan" depends="qd-compile" description="runs Tibetan version of QuillDriver">
		<java classname="fieldling.quilldriver.QDShell" jvm="${jvm}" fork="yes">
			<classpath>
				<pathelement location="${tibetan.classes}"/>
				<!-- <pathelement location="${build.dist}/quilldriver-TIB.jar"/> -->
				<path refid="my.classpath"/>
			</classpath>
		</java>
	</target>
  
	<target name="doc" depends="mp-compile,qd-compile" description="Build the documentation">
		<javadoc packagenames="fieldling.util.*,fieldling.mediaplayer.*,fieldling.quilldriver.*" sourcepath="${raw.source}" destdir="${build.doc}/api" bottom="Programme de These">
			<classpath refid="my.classpath"/>
		</javadoc>
	</target>
       
	<target name="distrib" depends="clean,mp-jar,qd-jar,doc" description="clean, compile, build jars, docs, and zips">
		<copy todir="${build.doc}">
			<fileset dir="${doc}">
				<include name="*.*"/>
			</fileset>
		</copy>
		<copy todir="${build.eg}">
			<fileset dir="${doc}/eg">
				<include name="*.*"/>
			</fileset>
		</copy>
		<property location="${build.eg}/BAC.mp3" name="mediafile"/>
		<style out="${build.eg}/testJMF.htm" in="${build.eg}/BAC.xml" style="${build.eg}/playerManager.xsl">
			<param name="player" expression="jmf"/>
			<param name="mediafile" expression="file://${mediafile}"/>
		</style>
		<style out="${build.eg}/testQT4J.htm" in="${build.eg}/BAC.xml" style="${build.eg}/playerManager.xsl">
			<param name="player" expression="qt4j"/>
			<param name="mediafile" expression="file://${mediafile}"/>
		</style>
		<zip zipfile="${build.dir}/FieldLing.zip" basedir="${build.dist}"/>
		<zip zipfile="${build.dir}/QuillDriver.zip" basedir="${build.dist}" includes="quilldriver.jar,lib/**"/>
	</target>
	
	<target name="distribSrc" description="source distribution">
		<delete dir="${distrib.source}"/>
		<mkdir dir="${distrib.source}"/>
		<copy todir="${distrib.source}/extensions">
			<fileset dir="${ext}">
				<include name="**/*.*"/>
			</fileset>
		</copy>
		<copy todir="${distrib.source}/documentation">
			<fileset dir="${doc}">
				<include name="**/*.*"/>
			</fileset>
		</copy>
		<copy todir="${distrib.source}/source">
			<fileset dir="${raw.source}">
				<include name="**/*.*"/>
			</fileset>
		</copy>
		<copy todir="${distrib.source}" file="build.xml"/>
		<zip zipfile="fieldlingSrc.zip" basedir="${distrib.source}"/>
		<delete dir="${distrib.source}"/>
	</target>
</project>
